@{
    ViewBag.Title = "生产排产";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using VisualSmart.Domain.Pro;
@using VisualSmart.Util;
@using PS.Models;
@using VisualSmart.Util.Menus;
@model IList<Pro_ShipPlan>
@{
    var mainPlan = ViewBag.MainDate as Pro_ShipPlanMain;

    List<Pro_ShipPlans> _shipPlansList = (List<Pro_ShipPlans>)ViewBag.ShipPlansList;
}
<link href="~/Scripts/handsontable/handsontable.full.min.css" rel="stylesheet" />
<script src="~/Scripts/handsontable/handsontable.full.min.js"></script>
<script src="~/Scripts/handsontable/jquery-1.10.2.min.js"></script>
<style>
    #test2 {
        position: fixed;
        top: 20px;
        background: #EDEDED;
        z-index: 9999;
    }
</style>
<div class="page-content" style="font-size:8px;">

    <div class="page-header">
        <h1>
            生产排产
            <small>
                <i class="ace-icon fa fa-angle-double-right"></i>
                填写信息后，进行保存
                <button class="btn btn-sm btn-primary " id="save" type="button" style="float:right;">
                    <i class="ace-icon fa fa-save bigger-110"></i>
                    保存
                </button>
            </small>
        </h1>
        <br />
    </div><!-- /.page-header -->
    <div class="row">
        <div class="col-xs-12">
            <form class="form-horizontal " role="form" action="/ShipPlan/Index" id="index" method="get">
                <input type="hidden" id="page" name="page" />
                @* 信息保存 *@
                <input type="hidden" name="ShipMainProNo" id="ShipMainProNo" value="@ViewBag.ShipMainProNo" />
                <input type="hidden" name="Id" id="Id" value="@ViewBag.Id" />
                <input type="hidden" name="PlanFromDate" id="PlanFromDate" value="@mainPlan.PlanFromDate" />
                <input type="hidden" name="PlanFromTo" id="PlanFromTo" value="@mainPlan.PlanFromTo" />
                @Html.AntiForgeryToken()
                <!-- 查询条件-->

                <hr class="no-padding no-margin" />
                <div class="row">
                    <div class="col-xs-12">
                        <div class="space-4"></div>
                        <!-- 查询列表 -->
                        <div class="row">
                            @{
                                List<Pro_SchedulingLine> proLineNos = ViewBag.SchedulingList as List<Pro_SchedulingLine>;
                                int lineIndex = 0;
                            }
                            <div class="col-xs-12 table-responsive">
                                <table id="simple-table" class="table table-hover table-condensed table-bordered">
                                    <thead>
                                        <tr>
                                            <th>实际工时数</th>

                                            @if (mainPlan != null)
                                            {
                                                for (int i = 0; i < 21; i++)
                                                {
                                                    var date = mainPlan.PlanFromDate.AddDays(i);
                                                    <th>@date.ToString("MM-dd")</th>
                                                }
                                            }

                                        </tr>

                                    </thead>
                                    <tbody>
                                        @foreach (var line in proLineNos)
                                        {
                                            <tr>
                                                <td>@line.ProLineNo</td>
                                                @if (mainPlan != null)
                                                {
                                                    for (int i = 0; i < 21; i++)
                                                    {
                                                        string id = "sum" + lineIndex + i;
                                                        <td><lable id="@id"></lable></td>
                                                    }
                                                    lineIndex++;
                                                }
                                            </tr>
                                        }
                                    </tbody>


                                </table>
                            </div>
                            <!-- /.span -->


                        </div><!-- /.row -->
                        <!-- PAGE CONTENT ENDS -->
                    </div><!-- /.col -->
                </div><!-- /.row -->

            </form>
        </div>
    </div>
    @* 先隐藏 *@
    @*<div id="test2">
           搜索内容： <input  type="text" value="" width="200" id="SelectContent"/><input type="button"  value="查询" onclick="SelectContent()"/>
            <div id="selectResult" style="font-size:18px;color:red; "></div>
        </div>*@

    <div class="row">
        <div class="col-xs-12">
            <!-- PAGE CONTENT BEGINS -->
            <div>
                <!-- #section:pages/faq -->

                <ul class="nav nav-tabs padding-18 tab-size-bigger" id="myTab">
                    @{
                        string allLines = "";
                        int Id = Convert.ToInt32(ViewBag.Id);
                    }
                    @for (int ii = 0; ii < proLineNos.Count; ii++)
                    {
                        string line = proLineNos[ii].ProLineNo;
                        allLines += string.Format("{0},", line);
                        if (ii == 0)
                        {
                            <li class="active">
                                <a data-toggle="tab" href="#" onclick="show(@ii);">
                                    @line
                                </a>
                            </li>
                        }
                        else
                        {
                            <li>
                                <a data-toggle="tab" href="#" onclick="show(@ii);">
                                    @line
                                </a>
                            </li>
                        }
                    }

                </ul>

                @Html.AntiForgeryToken()
                <input type="hidden" id="allLineCount" value="@proLineNos.Count" />
                <input type="hidden" id="allLines" value="@allLines" />
                <!-- /section:pages/faq -->
                <div class=" no-border padding-24">
                    @{
                        int startIndex = 0;
                        //列
                        List<string> allColumns = new List<string>();
                        if (mainPlan != null)
                        {
                            allColumns.Add("零件号");
                            allColumns.Add("零件名称");
                            allColumns.Add("发运地");
                            allColumns.Add("发运地说明");
                            allColumns.Add("类型");
                            allColumns.Add("产能");
                            allColumns.Add("库存");

                            string[] Day = new string[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
                            for (int i = 0; i < 21; i++)
                            {
                                var date = mainPlan.PlanFromDate.AddDays(i);
                                string week = Day[Convert.ToInt32(date.DayOfWeek.ToString("d"))].ToString();
                                allColumns.Add(week + "<br/>" + date.ToString("MM-dd"));
                            }
                            //allColumns.Add("ParentGoodNo");
                            //allColumns.Add("ParentGoodName");
                        }
                        //数据
                        List<List<object>> lineData = new List<List<object>>();
                        DateTime start = DateTime.Now;
                    }
                    @foreach (var line in proLineNos)
                    {
                        var currentLineList = Model.ToList().FindAll(t => t.ProLineNo == line.ProLineNo);
                        List<object> dataNumList = new List<object>();
                        string goodNos = "";
                        string temoGoodNos = "";
                        foreach (var m in currentLineList)
                        {
                            goodNos += string.Format("'{0}',", m.GoodNo);
                            temoGoodNos += string.Format("{0},", m.GoodNo);
                        }
                        goodNos = goodNos.Trim(',');

                        string startClass = "";
                        string startDivClass = "display:none;";
                        if (startIndex == 0)
                        {
                            startClass = "  in active";
                            startDivClass = "";
                        }

                        string hot = "hot" + startIndex;
                        var id = "line" + startIndex;

                        var ZBPeople = line.ProLineNo + "ZB";
                        var MBPeople = line.ProLineNo + "MB";
                        var WBPeople = line.ProLineNo + "WB";
                        var goodsLine = line.ProLineNo + "Goods";
                        var tempGoodsLine = "temp" + line.ProLineNo + "Goods";

                        <div id="@id" class="@startClass" style="@startDivClass">
                            <div class="row">
                                <div class="col-xs-12">
                                    <!--早中晚人数信息-->
                                    <div class="form-group" style="margin-bottom:6px; margin-top:10px;">
                                        <input type="hidden" value="@goodNos" id="@goodsLine" />
                                        <input type="hidden" value="@temoGoodNos" id="@tempGoodsLine" />
                                        <label class="col-sm-1 control-label no-padding-right" for="form-field-tags">早班人数：</label>
                                        <div class="col-sm-2 ">
                                            <input type="text" name="@ZBPeople" id="@ZBPeople" placeholder="早班人数" onchange="sumGongShiAndChanNeng(@startIndex,'@line.ProLineNo',@currentLineList.Count);" value="@line.MorningShift" />

                                        </div>
                                        <label class="col-sm-1 control-label no-padding-right" for="form-field-tags">中班人数：</label>
                                        <div class="col-sm-2 ">
                                            <input type="text" name="@MBPeople" id="@MBPeople" placeholder="中班人数" onchange="sumGongShiAndChanNeng(@startIndex,'@line.ProLineNo',@currentLineList.Count);" value="@line.MiddleShift" />

                                        </div>
                                        <label class="col-sm-1 control-label no-padding-right" for="form-field-tags">晚班人数：</label>
                                        <div class="col-sm-2 ">
                                            <input type="text" name="@WBPeople" id="@WBPeople" placeholder="晚班人数" onchange="sumGongShiAndChanNeng(@startIndex,'@line.ProLineNo',@currentLineList.Count);" value="@line.EveningShift" />

                                            @*<button class="btn btn-sm btn-success" type="button" onclick="ChangeType(0);">
                                                    清空
                                                </button>*@
                                        </div>
                                        <label class="col-sm-2 control-label no-padding-right" for="form-field-tags">
                                            <a href="#" onclick="NewJiSuan(@startIndex,'@line.ProLineNo');">
                                                计算
                                            </a>&nbsp;&nbsp;    
                                            <a href="#" onclick="ClearData(@startIndex);">
                                                清空
                                            </a>&nbsp;&nbsp;
                                            <a href="#" onclick="LockData(@startIndex,1);">
                                                全锁定
                                            </a>&nbsp;&nbsp;
                                            <a href="#" onclick="LockData(@startIndex,0);">
                                                全不锁定
                                            </a>
                                        </label>

                                    </div>
                                    <hr class="no-padding" />

                                    <!-- 产品 时间 数量明细 -->

                                    <div id="@hot"></div>
                                </div>
                            </div>
                        </div>
                        startIndex++;
                        foreach (var m in currentLineList)
                        {
                            //需求
                            var xu_obj = new HotData();
                            xu_obj.Type = "需求";
                            xu_obj.GoodNo = "计算";
                            xu_obj.GoodNo = "清空";
                            //xu_obj.StockNum = m.Qty;
                            //早
                            var zao_obj = new HotData();
                            zao_obj.Type = "早班";
                            //zao_obj.StockNum = m.Qty;
                            zao_obj.ChanNeng = m.MorningNum > 0 ? m.MorningNum.ToString() : null;
                            //中
                            var zhong_obj = new HotData();
                            zhong_obj.GoodNo = m.GoodNo;
                            zhong_obj.GoodName = m.GoodName;
                            zhong_obj.ShipTo = m.ShipTo;
                            zhong_obj.ShipToName = m.ShipToName;
                            zhong_obj.Type = "中班";
                            zhong_obj.ChanNeng = null;
                            zhong_obj.StockNum = m.Qty;
                            zhong_obj.ChanNeng = m.MiddleNum > 0 ? m.MiddleNum.ToString() : null;
                            //zhong_obj.ParentGoodNo = m.ParentGoodNo;
                            //zhong_obj.ParentGoodName = m.ParentGoodName;
                            //晚
                            var wan_obj = new HotData();
                            wan_obj.Type = "晚班";
                            //wan_obj.StockNum = m.Qty;
                            wan_obj.ChanNeng = m.EveningNum > 0 ? m.EveningNum.ToString() : null;
                            //需求差异
                            var xuqiu_obj = new HotData();
                            xuqiu_obj.Type = "需求差异";
                            xuqiu_obj.ChanNeng = null;
                            //xuqiu_obj.StockNum = m.Qty;
                            xuqiu_obj.GoodNo = m.ParentGoodNo;
                            xuqiu_obj.GoodName = m.ParentGoodName;
                            //供需求差异
                            var gongxuqiu_obj = new HotData();
                            //gongxuqiu_obj.GoodNo = "整箱包装数";
                            //gongxuqiu_obj.GoodName = "10";
                            gongxuqiu_obj.Type = "供需求差异";
                            gongxuqiu_obj.GoodNo = "整托包装数";
                            gongxuqiu_obj.GoodName = m.ShipPkgQty == null ? "" : m.ShipPkgQty.ToString();
                            List<SchedulingDateNumModel> dateNumList = new List<SchedulingDateNumModel>();
                            var currentLineShipPlansList = _shipPlansList.FindAll(t => t.PlanId == m.Id);
                            var requestInt = (int)ClassType.Requet;
                            var morningInt = (int)ClassType.Morning;
                            var middleInt = (int)ClassType.Middle;
                            var eveningInt = (int)ClassType.Evening;
                            if (mainPlan != null)
                            {
                                for (int i = 0; i < 21; i++)
                                {
                                    SchedulingDateNumModel dateNumModel = new SchedulingDateNumModel();
                                    if (i == 0)
                                    {
                                        dateNumModel.TopGongRequestDiffNum = m.Qty;
                                    }

                                    var date = mainPlan.PlanFromDate.AddDays(i);
                                    var itemList = currentLineShipPlansList.FindAll(t => t.PlanDate == date);
                                    dateNumModel.date = date;
                                    if (itemList.Count > 0)
                                    {
                                        var item = itemList.Find(t => t.SType == requestInt);

                                        int newPlanNum = 0;
                                        if (item != null)
                                        {
                                            //需求量 是BOM时 需要根据比例进行修改对应的信息 比如1个成本需要2个子产品
                                            if (Id == 0)
                                            {
                                                newPlanNum = item.PlanNum * m.BiLi;
                                            }
                                            else
                                            {
                                                newPlanNum = item.PlanNum;
                                            }
                                            HotHelp.SetValue(xu_obj, newPlanNum, i);
                                            dateNumModel.RequestNum = newPlanNum;
                                        }

                                        item = itemList.Find(t => t.SType == morningInt);
                                        if (item != null)
                                        {
                                            HotHelp.SetValue(zao_obj, item.PlanNum, i);
                                            dateNumModel.MorningNum = item.PlanNum;
                                        }
                                        item = itemList.Find(t => t.SType == middleInt);
                                        if (item != null)
                                        {
                                            HotHelp.SetValue(zhong_obj, item.PlanNum, i);
                                            dateNumModel.MiddleNum = item.PlanNum;
                                        }
                                        item = itemList.Find(t => t.SType == eveningInt);
                                        if (item != null)
                                        {
                                            HotHelp.SetValue(wan_obj, item.PlanNum, i);
                                            dateNumModel.EveningNum = item.PlanNum;
                                        }

                                    }
                                    if (i > 0)
                                    {
                                        dateNumModel.TopGongRequestDiffNum = dateNumList[i - 1].GongRequestDiffNum;
                                    }
                                    dateNumList.Add(dateNumModel);
                                }
                            }


                            if (mainPlan != null)
                            {
                                for (int i = 0; i < 21; i++)
                                {
                                    var RequestDiffNum = dateNumList[i].RequestDiffNum;
                                    if (RequestDiffNum != null)
                                    {
                                        HotHelp.SetValue(xuqiu_obj, RequestDiffNum.Value, i);
                                    }


                                    var GongRequestDiffNum = dateNumList[i].GongRequestDiffNum;
                                    if (GongRequestDiffNum != null)
                                    {
                                        HotHelp.SetValue(gongxuqiu_obj, GongRequestDiffNum.Value, i);
                                    }
                                }
                            }



                            dataNumList.Add(xu_obj);
                            dataNumList.Add(zao_obj);
                            dataNumList.Add(zhong_obj);
                            dataNumList.Add(wan_obj);
                            dataNumList.Add(xuqiu_obj);
                            dataNumList.Add(gongxuqiu_obj);
                        }
                        lineData.Add(dataNumList);
                    }
                    @{
                        TimeSpan ts = DateTime.Now - start;
                        var allJson = new MvcHtmlString(Newtonsoft.Json.JsonConvert.SerializeObject(lineData));
                        var hearsJson = new MvcHtmlString(Newtonsoft.Json.JsonConvert.SerializeObject(allColumns));
                    }
                </div>
            </div>

            <!-- PAGE CONTENT ENDS -->
        </div><!-- /.col -->
    </div><!-- /.row -->


</div>

<script src="~/Content/components/datatables/media/js/jquery.dataTables.js"></script>
<script src="~/Content/components/_mod/datatables/jquery.dataTables.bootstrap.js"></script>
<script src="~/Content/components/datatables.net-buttons/js/dataTables.buttons.js"></script>
<script src="~/Content/components/datatables.net-buttons/js/buttons.flash.js"></script>
<script src="~/Content/components/datatables.net-buttons/js/buttons.html5.js"></script>
<script src="~/Content/components/datatables.net-buttons/js/buttons.print.js"></script>
<script src="~/Content/components/datatables.net-buttons/js/buttons.colVis.js"></script>
<script src="~/Content/components/datatables.net-select/js/dataTables.select.js"></script>
<link href="~/Content/StyleSheet1.css" rel="stylesheet" />
<script src="~/Content/components/jquery.gritter/js/jquery.gritter.js"></script>
<script type="text/javascript">

    var allJson =@allJson ;

    function parseToInt(obj) {
        var val = 0;
        if (isNaN(obj) || obj==null||obj == "") {
            val = 0;
        } else {
            val = parseInt(obj);
        }
        return val;
    }


    var htbingList = [];
    //for (var i = 0; i < 3600; i = i + 6) {

    //    //htbingList.push({ row: i, col: 0, rowspan: 5, colspan: 1 });
    //    htbingList.push({ row: i, col: 1, rowspan: 5, colspan: 1 });
    //    //htbingList.push({ row: i, col: 2, rowspan: 5, colspan: 1 });
    //    //htbingList.push({ row: i, col: 3, rowspan: 5, colspan: 1 });
    //    //htbingList.push({ row: i, col: 5, rowspan: 5, colspan: 1 });

    //}
    var MyColHeaders = @hearsJson;


    var colHeadersName = ['GoodNo', 'GoodName', 'ShipTo', 'ShipToName', 'Type', 'StockNum', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '18', '16', '17', '18', '19', '20', '21'];


    var MyRenderer = function (instance, td, row, col, prop, value, cellProperties) {
        Handsontable.renderers.TextRenderer.apply(this, arguments);

        // $(td).css("text-align", "center");
        // $(td).css("vertical-align", "center");
       
        if (col == 0 && row% 6 == 0) {
            
            $(td).css("color", "red");
        }
        if (row % 6 == 0) {
            $(td).css("background-color", "lemonchiffon");
            if (col < 4||col==6) {

                td.style.border = "0";
            }
            cellProperties.readOnly = true;
        }
            //需求差异
        else if ((row - 4) % 6 == 0) {
            $(td).css("background-color", "aliceblue");
            cellProperties.readOnly = true;
        }
            //供需求差异
        else if ((row - 5) % 6 == 0) {
            $(td).css("background-color", "aliceblue");
            cellProperties.readOnly = true;

        } else {
            if (col<4||col==6) {
                td.style.border = "0";
            }
        }
        //小于0红色显示
        if ($(td).html() < 0) {
            $(td).css("color", "red");
        }

        //$(td).attr("class", "htDimmed")
    };

    var allHotList=[];

    for(var i=0;i<$("#allLineCount").val();i++){
        showHot(i);
    }

    function showHot(i){
        var dataObject = allJson[i];// [];
        var hotElement = document.querySelector('#hot'+i);
        var hotElementContainer = hotElement.parentNode;
        var hotSettings = {
            data: dataObject,
            //maxCols:28,
            columns: [
                {
                    data: 'GoodNo',
                    type: 'text',
                    readOnly: true
                },
                  {
                      data: 'GoodName',
                      type: 'text',
                      readOnly: true
                  },
                   {
                       data: 'ShipTo',
                       type: 'text',
                       readOnly: true
                   },
                   {
                       data: 'ShipToName',
                       type: 'text',
                       readOnly: true
                   },
                   {
                       data: 'Type',
                       type: 'text',
                       readOnly: true
                   },
                   {
                       data: 'ChanNeng',
                       type: 'text',
                       readOnly: true
                   },
                   {
                       data: 'StockNum',
                       type: 'text',
                       readOnly: true
                   },
                   {
                       data: 'One',
                       type: 'numeric'
                   },
                   {
                       data: 'Two',
                       type: 'numeric'
                   },
                   {
                       data: 'Three',
                       type: 'numeric'
                   },
                   {
                       data: 'Four',
                       type: 'numeric'
                   },
                   {
                       data: 'Five',
                       type: 'numeric'
                   },
                   {
                       data: 'Six',
                       type: 'numeric'
                   },
                   {
                       data: 'Seven',
                       type: 'numeric'
                   },
                   {
                       data: 'Eight',
                       type: 'numeric'
                   },
                   {
                       data: 'Nine',
                       type: 'numeric'
                   },
                   {
                       data: 'Ten',
                       type: 'numeric'
                   },
                   {
                       data: 'Eleven',
                       type: 'numeric'
                   },
                   {
                       data: 'Twelve',
                       type: 'numeric'
                   },
                    {
                        data: 'Thirteen',
                        type: 'numeric'
                    },
                     {
                         data: 'Fourteen',
                         type: 'numeric'
                     },
                      {
                          data: 'Fifteen',
                          type: 'numeric'
                      },
                       {
                           data: 'Sixteen',
                           type: 'numeric'
                       },
                        {
                            data: 'Seventeen',
                            type: 'numeric'
                        },
                         {
                             data: 'Eighteen',
                             type: 'numeric'
                         },
                          {
                              data: 'Nineteen',
                              type: 'numeric'
                          },
                           {
                               data: 'Twenty',
                               type: 'numeric'
                           },
                            {
                                data: 'TwentyOne',
                                type: 'numeric'
                            }

            ],
            stretchH: 'all',
            //width: 1024,
            autoWrapRow: true,
            //colWidths:[30,60,30,60,20,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-1,-1],
            //height: 487,
            //maxRows: 22,
            //maxCols:28,
            search: true,
            trimRows: [
              1,
              2,
              5
            ],

            filters: true,
            dropdownMenu: ['filter_by_condition', 'filter_by_value', 'filter_action_bar'],
            mergeCells: true,
            contextMenu: false,
            mergeCells: htbingList,
            //cell: [
            //       { row: 0, col: 0, className: "htCenter htMiddle" }, // 设置下标为0,0的单元格样式 水平居中、垂直居中,
            //       { row: 0, col: 1, className: "htCenter htMiddle", readOnly: true },
            //        { row: 6, col: 1, className: "htCenter htMiddle", readOnly: true },
            //        { row: 0, col: 2, className: "htCenter htMiddle" },
            //        { row: 0, col: 3, className: "htCenter htMiddle" },
            //        { row: 5, col: 6, rowspan: 1, colspan: 10, readOnly: true, className: "htCenter htMiddle" }

            //],
            cells: function (row, col, prop) {
                this.renderer = MyRenderer;
            },
            rowHeaders: true,
            colHeaders:MyColHeaders,
            //fixedRowsTop: 2,
            //fixedColumnsLeft: 3,
            //renderAllRows:true,//是否呈现所有行
            afterSetCellMeta: function (row, col, key, val,prop) {
                console.log("cell meta changed", row, col, key, val,prop);
            },
            afterOnCellMouseDown: function (event, e, TD) {
               
                if (e.col == 0 && e.row % 6 == 0) {
                    var value = hot.getDataAtCell(e.row, e.col);
                   
                    if (value == "" || value == null) {
                        value = "锁定";
                    } else {
                        value = "";
                    } 
                    hot.setDataAtCell([[e.row, e.col, value]]);
                }
                
            },
            afterChange: function (changes, source) {

                if (source == null || changes == null) {
                    return;
                }

                var params = [];
                if (changes != null) {
                    var row = parseInt(changes[0][0]);//行
                    var colPro = changes[0][1];//列属性
                    var hot=allHotList[currentLineIndex];
                    var colIndex =hot.propToCol(colPro);// colHeadersName.indexOf(colPro);
                    if(colIndex<=6){
                        return;
                    }
                    //当等于1 也就是第一列 时 初期库存= 供需求差异
                    //需求差异=需求-上一次供需求差异
                    //供需求差异=需求差异+早中晚数量
                    var XQNum_Index = 0;
                    if ((row - 1) % 6 == 0) {
                        //早
                        XQNum_Index = row - 1;
                    } else if ((row - 2) % 6 == 0) {
                        //中
                        XQNum_Index = row - 2;

                    } else if ((row - 3) % 6 == 0) {
                        //晚
                        XQNum_Index = row - 3;
                    }
                    if ((row - 1) % 6 == 0 || (row - 2) % 6 == 0 || (row - 3) % 6 == 0) {

                        //思路先获取 需求 早中晚的信息，然后计算需求差异，供求差异，最后整体赋值给hot
                        var XQ_RowData=hot.getDataAtRow(XQNum_Index);

                        var ZB_RowData=hot.getDataAtRow(XQNum_Index+1);
                        //console.log(ZB_RowData);
                        var MB_RowData=hot.getDataAtRow(XQNum_Index+2);
                        var WB_RowData=hot.getDataAtRow(XQNum_Index+3);
                        var aa=XQNum_Index+4;
                        var bb=XQNum_Index+5;
                        var editData=[];
                        var requestDiffNum =0;
                        var gongRequestDiffNum =0;
                        var topGongRequestDiffNum=0;

                        for(var i=colIndex;i<=27;i++){

                            //编辑的是否是第一行数据，第一行数据要拿库存作为 供需求查询默认值
                            //初始化数据
                            if(i==colIndex){
                                if(i==7){
                                    topGongRequestDiffNum=MB_RowData[i-1];
                                    //console.log(topGongRequestDiffNum);
                                }else{
                                    topGongRequestDiffNum=hot.getDataAtCell(bb,i-1);
                                }
                                //console.log(topGongRequestDiffNum);
                            }
                            //计算当前的信息
                            requestDiffNum = topGongRequestDiffNum - parseToInt(XQ_RowData[i]);
                            gongRequestDiffNum = requestDiffNum + parseToInt(ZB_RowData[i]) + parseToInt(MB_RowData[i]) + parseToInt(WB_RowData[i]);
                            editData.push([aa, i, requestDiffNum]);
                            editData.push( [bb, i, gongRequestDiffNum]);
                            topGongRequestDiffNum=gongRequestDiffNum;
                        }
                        hot.setDataAtCell(editData);
                        var topColIndex=0;
                        for(var sumCol=0;sumCol<changes.length;sumCol++){
                            var editColIndex=hot.propToCol(changes[sumCol][1]);
                            if(topColIndex!=editColIndex){
                                SumGongShi(editColIndex);
                                topColIndex=editColIndex;
                            }
                        }

                    }
                }

            }

        };
        var hot = new Handsontable(hotElement, hotSettings);
        allHotList.push(hot);
    }

    function onlyExactMatch(queryStr, value) {
        return queryStr.toString() === value.toString();
    }

    //Handsontable.Dom.addEvent($("#APAB03ZB"), 'keyup', function (event) {
    //    var queryResult = hot.search.query(this.value);

    //    console.log(queryResult);
    //    hot.render();
    //});

    //计算工时信息
    function SumGongShi(col){
        var hot=allHotList[currentLineIndex];
        var colDataList=hot.getDataAtCol(col);
        var sum=0;
        for(var i=1;i<colDataList.length;i++){

            if ((i - 1) % 6 == 0||(i - 2) % 6 == 0||(i - 3) % 6 == 0) {
                //早
                var channeng=hot.getDataAtCell(i,5);
                if(channeng!=null&&colDataList[i]!=null){
                    //转换成秒
                    sum+=colDataList[i]/channeng*60*60;
                }
            }

        }
        //实际工时数=SUM（零件的早班生产量/早班人数的产能量+零件的中班生产量/中班人数的产能量+零件的晚班生产量/晚班人数的产能量）
        //注意：1）早中晚班的工时要换算成秒，才可以相加，最终的总工时才可以换算成小时。
        //2）SUM是将所有零件的所有工时，加总到一起。
        //3）建议，每更新一个生产计划，相关的需求差异和实际工时数会自动更新。
        if (sum == 0) {
            $("#sum"+currentLineIndex+(col-7)).html("");
        }else{
            $("#sum"+currentLineIndex+(col-7)).html((sum/3600).toFixed(2));
        }

    }

    //重新计算需求差异+供需求差异
    function ReSetRequestDiffNum(hot, xuArr, zaoArr, zhongArr, wanArr, xuDiffArr, gongXuDiffArr, i) {
        //初始化 将需求和 供需求差异设置为0
        //初始化 0
        for (var jj = 7; jj < 28; jj++) {
            xuDiffArr[jj] = 0;
            gongXuDiffArr[jj] = 0;           
        }
        var topGongRequestDiffNum = 0;
        for (var col = 7; col < 28; col++) {
            if (col == 7) {
                topGongRequestDiffNum = hot.getDataAtCell(i + 2, 6);//库存
            }
            else {
                topGongRequestDiffNum = gongXuDiffArr[col - 1];
            }

            var xuValue = xuArr[col];

            if (xuValue == null) {
                xuDiffArr[col] = topGongRequestDiffNum;

            } else {
                xuDiffArr[col] = topGongRequestDiffNum - xuValue
            }
            gongXuDiffArr[col] = xuDiffArr[col] + zaoArr[col] + zhongArr[col] + wanArr[col];
        }
    }
    //计算 -高级
    function NewJiSuan(index, proLineNo) {


        //先清空所有功能
        var hot = allHotList[index];

        //获取产能列
        var channNengDataList = hot.getDataAtCol(5);
        //获取 最大产能基数  早*24 ，早晚*12 ，早中晚 *8
        var ZBPeople = $("#"+proLineNo + "ZB").val();
        var MBPeople = $("#" + proLineNo + "MB").val();
        var WBPeople = $("#" + proLineNo + "WB").val();
        var jishu = 0;
        var jishuNum = 0;
        if (ZBPeople != "" && ZBPeople != "0") {
            jishu += 1;
        }
        if (MBPeople != "" && MBPeople != "0") {
            jishu += 1;
        }
        if (WBPeople != "" && WBPeople != "0") {
            jishu += 1;
        }
        if (jishu == 1) {
            jishuNum = 24;
        }
        if (jishu == 2) {
            jishuNum = 12;
        }
        if (jishu == 3) {
            jishuNum = 8;
        }

        //获取所有行
        var allRowsCount = hot.countRows();

        for (var i = 0; i < allRowsCount; i += 6) {

            var xuData = hot.getDataAtRow(i);//获取需求整行数据
            //console.log("老的集合：");
            //console.log(xuData);
            //对需求重新排序  把需求都集中在一起 不要中间有空档
            var newXuData = [];
            var startIndex = -1;
            
            for (var gg = 7; gg < 28; gg++) {
                var xuV = xuData[gg];
                if (xuV != null && xuV > 0) {
                    newXuData.push(xuV);
                    if (startIndex == -1) {
                        startIndex = gg;
                    }
                }
            }
            if (startIndex != -1) {
                var len = newXuData.length + 7;
                console.log("len："+len);
                for (var kk = startIndex-1; kk < 28; kk++) {
                    if (kk < len) {
                        console.log(newXuData[kk - 7]);
                        xuData[kk] = newXuData[kk - 7];
                    } else {
                        xuData[kk] = null;
                    }
                }
                //console.log("新的集合：");
                //console.log(newXuData);
                //console.log(xuData);
            }


            var xuRequestData = hot.getDataAtRow(i+4);//获取需求整行数据
            var gongRequestData = hot.getDataAtRow(i + 5);//获取需求整行数据

            //早中晚 可以填写的数据
            var zaoData = [];
            var zhongData = [];
            var wanData = [];

            //初始化 0
            for (var jj = 7; jj < 28; jj++) {
                zaoData[jj] = 0;
                zhongData[jj] = 0;
                wanData[jj] = 0;
            }
            //产能
            var zaoChanNeng = channNengDataList[i + 1];
            var zhongChanNeng = channNengDataList[i + 2];
            var wanChanNeng = channNengDataList[i + 3];

            var topGongRequestDiffNum = 0;

            for (var col = 7; col < 28; col++) {

                ReSetRequestDiffNum(hot, xuData, zaoData, zhongData, wanData, xuRequestData, gongRequestData,i);

                //2.供需求差异与第二天的需求差异做对比
                //第二天需求差异如果是负数的话 前一天就要排完
                if (col < 27) {
                    if (xuData[col + 1] != null) {
                        var nextXu = gongRequestData[col] - xuData[col + 1];//下一天的需求差异 如果是负数的话
                        if (nextXu < 0) {
                            var nums = -nextXu;
                            //需要循环看看前面的早中晚 有没有没排完的。 如果没有排完需要前面的拍完，不能让第二天需求差异为负数
                            for (var newCol = col; newCol > 6; newCol--) {
                                //记录早中晚本次填写的数量
                                zaoZhongWanTotal = 0;
                                if (nums > 0) {
                                    if (zaoChanNeng != null) {
                                        var zao = zaoChanNeng * jishuNum;
                                        //获取已经排的信息
                                        var hadZao = zaoData[newCol];

                                        //判断是否有剩余的数量没有排
                                        var shengyu = zao - hadZao;
                                        if (shengyu > 0) {
                                            if (nums >= shengyu) {
                                                zaoData[newCol] = zao;//更新之前的数据信息
                                                nums = nums - shengyu;
                                                zaoZhongWanTotal = shengyu;
                                            } else {
                                                zaoData[newCol] = zaoData[newCol] + nums;
                                                zaoZhongWanTotal = nums;
                                                nums = 0;
                                            }
                                        }
                                    }
                                    if (zhongChanNeng != null && nums > 0) {
                                        var zao = zhongChanNeng * jishuNum;

                                        //获取已经排的信息
                                        var hadZao = zhongData[newCol];

                                        //判断是否有剩余的数量没有排
                                        var shengyu = zao - hadZao;
                                        if (shengyu > 0) {
                                            if (nums >= shengyu) {
                                                zhongData[newCol] = zao;//更新之前的数据信息
                                                nums = nums - shengyu;
                                                zaoZhongWanTotal += shengyu;
                                            } else {
                                                zhongData[newCol] = zhongData[newCol] + nums;
                                                zaoZhongWanTotal += nums;
                                                nums = 0;
                                            }
                                        }
                                    }
                                    if (wanChanNeng != null && nums > 0) {
                                        var zao = wanChanNeng * jishuNum;

                                        //获取已经排的信息
                                        var hadZao = wanData[newCol];

                                        //判断是否有剩余的数量没有排
                                        var shengyu = zao - hadZao;
                                        if (shengyu > 0) {
                                            if (nums >= shengyu) {
                                                wanData[newCol] = zao;//更新之前的数据信息
                                                nums = nums - shengyu;
                                                zaoZhongWanTotal += shengyu;
                                            } else {
                                                wanData[newCol] = wanData[newCol] + nums;
                                                zaoZhongWanTotal += nums;
                                                nums = 0;
                                            }
                                        }
                                    }

                                    if (zaoZhongWanTotal > 0) {
                                        ReSetRequestDiffNum(hot, xuData, zaoData, zhongData, wanData, xuRequestData, gongRequestData,i);
                                    }

                                } else {
                                    break;
                                }
                            }
                        }
                    }
                }


                //最后一列需要特殊处理
                //判断供需求是否<0  如果小于0  则只对这一天进行排 其他都不用管。
               
                if (col == 27) {
                    ReSetRequestDiffNum(hot, xuData, zaoData, zhongData, wanData, xuRequestData, gongRequestData,i);
                    

                    console.log(xuData);
                    console.log(zaoData);
                    console.log(zhongData);
                    console.log(wanData);

                    console.log(xuRequestData);
                    console.log(gongRequestData);
                }
                if (col == 27 && gongRequestData[27] < 0) {
                    var nums= -gongRequestData[27];
                    if (zaoChanNeng != null) {
                        var zao = zaoChanNeng * jishuNum;
                        if (nums >= zao) {
                            zaoData[col] = zao;
                            nums = nums - zao;

                        } else {
                            zaoData[col] = nums;
                            nums = 0;
                        }
                    }
                        if (zhongChanNeng != null && nums>0) {
                            var zao = zhongChanNeng * jishuNum;
                            if (nums >= zao) {
                                zhongData[col] = zao;
                                nums = nums - zao;                               
                            } else {                                
                                zhongData[col] = nums;
                                nums = 0;
                            }
                        }
                        if (wanChanNeng!= null && nums > 0) {
                            var zao = wanChanNeng * jishuNum;
                            if (nums >= zao) {
                                wanData[col] = zao;                              
                                nums = nums - zao;                               
                            } else {
                                wanData[col] = nums;                               
                                nums = 0;
                            }
                        }
                }
            }

            var newZaoArr = [];
            //赋值
            if (zaoData.length > 0) {
                newZaoArr = getValueArr(zaoData, i + 1);
                hot.setDataAtCell(newZaoArr);
            }
            if (zhongData.length > 0) {
                hot.setDataAtCell(getValueArr(zhongData, i + 2));
            }
            if (wanData.length > 0) {
                hot.setDataAtCell(getValueArr(wanData, i + 3));
            }
            //重新复制 重新计算需求 和 供需求差异信息
            if (newZaoArr.length > 0) {
                hot.setDataAtCell([newZaoArr[0]]);
            }

        }
    }
     //将数组转为 hot 需要的集合 进行插入数据
    function getValueArr(arr, row) {
        var newArr = new Array();
        for (var i = 7; i < arr.length; i++) {
            if (arr[i] > 0) {
                newArr.push([row, i, arr[i] ]);
            }
        }
        return newArr;
    }
    //计算
    function JiSuan(index) {

        //先清空所有功能
        var hot = allHotList[index];

          //获取产能列
        var channNengDataList = hot.getDataAtCol(5);

        //获取所有行
        var allRowsCount = hot.countRows();
        var xuData = [];
        for (var i = 0; i < allRowsCount; i++) {
            var editData = [];
            var xuQuIndex = 0;

            if (i % 6 == 0) {
                xuQuIndex = i;
                xuData = hot.getDataAtRow(i);
            }
            if ((i - 1) % 6 == 0 || (i - 2) % 6 == 0 || (i - 3) % 6 == 0) {
                //需求量有的时候 并且有产能的时候
                var chanNeng = channNengDataList[i];
                if (chanNeng!= null) {
                    for (var col = 7; col < 28; col++) {
                        if (xuData[col] != null) {
                            editData.push([i, col, chanNeng* 8]);
                        }
                    }
                }
                if (editData.length > 0) {
                    console.log(editData);
                    hot.setDataAtCell(editData);
                }
            }
        }

    }
    //锁定信息
    function LockData(index, ifLock) {
        //先清空所有功能
        var hot = allHotList[index];

        //获取产能列
        var channNengDataList = hot.getDataAtCol(0);
        var content = "";
        if (ifLock == 1) {
            content = "锁定";
        }  
        //获取所有行
        var allRowsCount = hot.countRows();
        var editData = [];
        for (var i = 0; i < allRowsCount; i++) {
            if (i % 6 == 0) {
                editData.push([i, 0, content]);
            }
        }
        hot.setDataAtCell(editData);
    }
    //清空数据
    function ClearData(index) {
        //先清空所有功能
        var hot = allHotList[index];

        //获取产能列
        var channNengDataList = hot.getDataAtCol(5);

        //获取所有行
        var allRowsCount = hot.countRows();
        var xuData = [];
        for (var i = 0; i < allRowsCount; i++) {
            var editData = [];
            if (i % 6 == 0) {
                if (hot.getDataAtCell(i, 0) == "锁定") {
                    i = i + 5;
                }
            }
            if ((i - 1) % 6 == 0 || (i - 2) % 6 == 0 || (i - 3) % 6 == 0) {
                xuData = hot.getDataAtRow(i);

                for (var col = 7; col < 28; col++) {
                    if (xuData[col] != null) {
                        editData.push([i, col, null]);
                    }
                }
                if (editData.length > 0) {
                    console.log(editData);
                    hot.setDataAtCell(editData);
                }
            }
        }
    }

    // //根据产线，人数获取对应的产能信息，如果没有获取到 则为0
    function sumGongShiAndChanNeng(index,proLineNo,lineGoodsCount){

        var zbPeople = parseToIntByTable($("#" + proLineNo + "ZB"), 1);
        var mbPeople = parseToIntByTable($("#" + proLineNo + "MB"), 1);
        var wbPeople = parseToIntByTable($("#" + proLineNo + "WB"), 1);
        var people = zbPeople + "," + mbPeople + "," + wbPeople;

        var url = "/Scheduling/GetProductions/?proLineNo=" + proLineNo + "&ShipMainProNo=" + $("#ShipMainProNo").val() + "&people=" + people;

        //如果全部都是0 则统计为0
        if (zbPeople == 0 && mbPeople == 0 && wbPeople == 0) {
            for (var i = 0; i <=21; i++) {
                $("#sum" + index + i).html("");
            }
            return;
        }

        $.ajax({
            data: { '__RequestVerificationToken': $('input[name=__RequestVerificationToken]').val() },
            url: url,
            type: 'post',
            async: false,
            cache: false,
            success: function (data) {
                //console.log(data);
                //console.log(proLineNo);
                if (data.Mess == "success") {

                    //先清空所有功能
                    var hot=allHotList[index];

                    //获取产能列
                    var colDataList=hot.getDataAtCol(5);
                    var sum=0;
                    var editData=[];
                    for(var i=1;i<colDataList.length;i++){
                        //早 中 晚
                        if ((i - 1) % 6 == 0||(i - 2) % 6 == 0||(i - 3) % 6 == 0) {
                            //早
                            editData.push([i, 5, null]);
                        }
                    }
                    hot.setDataAtCell(editData);

                    //如果没有找到对应的人数产能的信息则情况
                    if (data.Data.length==0) {
                        for (var i = 0; i <=21; i++) {
                            $("#sum" + index + i).html("");
                        }
                        var className = "gritter-error gritter-light";
                        error = "没有匹配到产能信息！";
                        $.gritter.add({
                            title: error,
                            text: "",
                            class_name: className
                        });
                        return;
                    }
                    var newData=[];
                    //获取商品编码列
                    var goodDataList=hot.getDataAtCol(0);
                    //查找对应的商品的产能信息
                    for(var i=1;i<colDataList.length;i++){
                        if ((i - 2) % 6 == 0) {
                            var goodNo=hot.getDataAtCell(i,0);
                            if(goodNo!=null&&goodNo!=""){
                                $.each(data.Data,function(index,item){
                                    if(item.People==zbPeople&&item.GoodNo==goodNo){
                                        newData.push([i-1, 5, item.Number]);
                                    }
                                    if(item.People==mbPeople&&item.GoodNo==goodNo){
                                        newData.push([i, 5, item.Number]);
                                    }
                                    if(item.People==wbPeople&&item.GoodNo==goodNo){
                                        newData.push([i+1, 5, item.Number]);
                                    }
                                });
                            }
                        }
                    }
                    hot.setDataAtCell(newData);

                    //按照天进行计算
                    for (var day = 7; day <= 28; day++) {
                        SumGongShi(day,proLineNo);
                    }
                }

            }
        });


    }

    var currentLineIndex=0;

    function show(index){
        currentLineIndex=index;
        $("#line"+index).css("display","block");
        for(var i=0;i<$("#allLineCount").val();i++){
            if(index!=i){
                $("#line"+i).css("display","none");
            }
        }
    }

    //转化成int 类型， 1是val 2是html
    function parseToIntByTable(obj, type) {
        var val = 0;
        if (type == 1) {
            if (obj.val() == "") {
                return 0;
            }
            val = parseInt(obj.val());
        } else {
            val = parseInt(obj.html());
        }

        if (isNaN(val)) {
            if (type == 1) {
                obj.val("");
            }
            val = 0;
        }
        return val;
    }

    function LoadSum(){
        var allLines=$("#allLines").val().split(',');

        for(var index=0;index<allHotList.length;index++){
            var hot=allHotList[index];
            //console.log("hot  index :"+index);

            for (var day = 7; day <= 28; day++) {

                //获取一列的所有数据
                var colDataList=hot.getDataAtCol(day);


                var sum=0;
                //遍历这一列
                for(var i=1;i<colDataList.length;i++){

                    if ((i - 1) % 6 == 0||(i - 2) % 6 == 0||(i - 3) % 6 == 0) {
                        //早
                        var channeng=hot.getDataAtCell(i,5);
                        if(channeng!=null&&colDataList[i]!=null){
                            //转换成秒
                            sum+=colDataList[i]/channeng*60*60;
                            //console.log("sum+="+colDataList[i]+"/"+channeng+"*60*60="+sum);
                        }
                    }

                }

                //实际工时数=SUM（零件的早班生产量/早班人数的产能量+零件的中班生产量/中班人数的产能量+零件的晚班生产量/晚班人数的产能量）
                //注意：1）早中晚班的工时要换算成秒，才可以相加，最终的总工时才可以换算成小时。
                //2）SUM是将所有零件的所有工时，加总到一起。
                //3）建议，每更新一个生产计划，相关的需求差异和实际工时数会自动更新。
                if (sum == 0) {
                    $("#sum"+index+(day-7)).html("");
                }else{

                    $("#sum"+index+(day-7)).html((sum/3600).toFixed(2));
                }
            }
        }
    }

    window.onload=LoadSum();
    $("#save").one("click",function(){
        $.ajax({
            beforeSend: function(){
                // Handle the beforeSend event
                $("#save").text("正在保存，请等候.....");
                $("#save").attr({ disabled: "disabled" });
            },
            async: true,
            complete:function(){
                SaveData();
            }
        });
    });
    //保存信息
    function SaveData(){


        //1.先保存表头 [Pro_Scheduling] 纪录开始时间 ，结束时间，发运单信息 获取一个ID
        var scheduling_Id=0;
        var pro_Scheduling=
            {
                PlanFromDate:'@mainPlan.PlanFromDate',
                PlanToDate:'@mainPlan.PlanFromTo',
                Id:$("#Id").val(),
                ShipMainProNo:$("#ShipMainProNo").val()
            };
        var url="/Scheduling/AddPro_Scheduling";
        $.ajax({
            data: { '__RequestVerificationToken': $('input[name=__RequestVerificationToken]').val(),model:pro_Scheduling },
            url: url,
            type: 'post',
            async: false,
            cache: false,
            success: function (data) {
                if (data.Mess == "success") {
                    //如果没有找到对应的人数产能的信息则情况
                    scheduling_Id=data.Id;
                }

            }
        });
        if(scheduling_Id>0){
            //2.在保存产线信息+ 早中晚人数信息
            var allLines=$("#allLines").val().split(',');
            for(var i=0;i<allLines.length;i++){
                var line=allLines[i];
                if(line!=""){
                    var zbPeople = parseToIntByTable($("#" + line + "ZB"), 1);
                    var mbPeople = parseToIntByTable($("#" + line + "MB"), 1);
                    var wbPeople = parseToIntByTable($("#" + line + "WB"), 1);
                    var Pro_SchedulingLine=
                        {
                            MainId:scheduling_Id,
                            ProLineNo:line,
                            MorningShift:zbPeople,
                            MiddleShift:mbPeople,
                            EveningShift:wbPeople,
                        };
                    var SLineId=0;
                    url="/Scheduling/AddPro_SchedulingLine";
                    $.ajax({
                        data: { '__RequestVerificationToken': $('input[name=__RequestVerificationToken]').val(),model:Pro_SchedulingLine },
                        url: url,
                        type: 'post',
                        async: false,
                        cache: false,
                        success: function (data) {
                            if (data.Mess == "success") {
                                //如果没有找到对应的人数产能的信息则情况
                                SLineId=data.Id;
                                //alert(SLineId);
                            }

                        }
                    });
                    var hot=allHotList[i];
                    var goodsList=[];
                    //21 列
                    for(var rowIndex=0;rowIndex<= hot.countRows();rowIndex=rowIndex+6){

                        var xuDetail=hot.getDataAtRow(rowIndex);
                        var zaoDetail=hot.getDataAtRow(rowIndex+1);
                        var zhongDetail=hot.getDataAtRow(rowIndex+2);
                        var wanDetail=hot.getDataAtRow(rowIndex+3);
                        if(zhongDetail[0]==null){
                            continue;
                        }

                        //增加父零件号+零件名称
                        zhongDetail.push(hot.getDataAtCell(rowIndex+4,0));
                        zhongDetail.push(hot.getDataAtCell(rowIndex+4,1));

                        //增加整托包装数
                        zhongDetail.push(hot.getDataAtCell(rowIndex+5,1));
                        //console.log(zaoDetail);
                        //3.保存 产线+库存+产能信息
                        goodsList.push(xuDetail);
                        goodsList.push(zaoDetail);
                        goodsList.push(zhongDetail);
                        goodsList.push(wanDetail);
                    }
                    url="/Scheduling/AddPro_SchedulingGoods";
                    console.log(JSON.stringify(goodsList));
                    $.ajax({
                        data: { '__RequestVerificationToken': $('input[name=__RequestVerificationToken]').val(),model:JSON.stringify(goodsList),Date:'@mainPlan.PlanFromDate', SLineId:SLineId },
                        url: url,
                        type: 'post',
                        async: false,
                        cache: false,
                        success: function (data) {
                            if (data.Mess == "success") {

                            }

                        }
                    });

                }
            }
            alert("保存成功！");
            window.close();
        }
    }

    //jq部分
    $(document).scroll(function(e) {
        if($(document).scrollTop()!=0){
            $("#test2").stop();
            $("#test2").animate({"top":"0"});
        }
        else{
            $("#test2").stop();
            $("#test2").animate({"top":"20px"});
        }
    });

    function SelectContent(){
        $("#selectResult").html("");
        var selectContent=$("#SelectContent").val();

        if(selectContent==""){
            return;
        }

        var hot=allHotList[currentLineIndex];
        var goodNoList=hot.getDataAtCol(0);
        var goodNameList=hot.getDataAtCol(1);
        var shipNo=hot.getDataAtCol(2);
        var shipName=hot.getDataAtCol(3);
        var sum=0;
        var result="行号：";
        var count=0;
        for(var i=1;i<goodNoList.length;i++){
            if ((i - 2) % 6 == 0&&count<10) {
                if(goodNoList[i].indexOf(selectContent)>-1||
                   goodNameList[i].indexOf(selectContent)>-1||
                    shipNo[i].indexOf(selectContent)>-1||
                    shipName[i].indexOf(selectContent)>-1) {
                    result+=(i+1)+ ",";
                    count=count+1;
                }
            }
        }
        if(result!="行号："){
            $("#selectResult").html(result.trim(","));
        }
    }
</script>
