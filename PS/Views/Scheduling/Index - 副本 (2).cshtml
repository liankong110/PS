@{
    ViewBag.Title = "生产排产";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using VisualSmart.Domain.Pro;
@using VisualSmart.Util;
@using PS.Models;
@model IList<Pro_ShipPlan>
@{
    var mainPlan = ViewBag.MainDate as Pro_ShipPlanMain;
    var shipPlansList = ViewBag.ShipPlansList as List<Pro_ShipPlans>;
}
<link href="~/Scripts/handsontable/handsontable.full.min.css" rel="stylesheet" />
<script src="~/Scripts/handsontable/handsontable.full.min.js"></script>
<script src="~/Scripts/handsontable/jquery-1.10.2.min.js"></script>
<div class="page-content" style="font-size:5px;">

    <div class="page-header">
        <h1>
            生产排产
            <small>
                <i class="ace-icon fa fa-angle-double-right"></i>
                填写信息后，进行保存
                <button class="btn btn-sm btn-primary " id="save"  type="button">
                    <i class="ace-icon fa fa-save bigger-110"></i>
                    保存
                </button>
            </small>
        </h1>
    </div><!-- /.page-header -->
    <div class="row">
        <div class="col-xs-12">
            <form class="form-horizontal " role="form" action="/ShipPlan/Index" id="index" method="get">
                <input type="hidden" id="page" name="page" />
                @* 信息保存 *@
                <input type="hidden" name="ShipMainProNo" id="ShipMainProNo" value="@ViewBag.ShipMainProNo" />
                <input type="hidden" name="Id" id="Id" value="@ViewBag.Id" />
                <input type="hidden" name="PlanFromDate" id="PlanFromDate" value="@mainPlan.PlanFromDate" />
                <input type="hidden" name="PlanFromTo" id="PlanFromTo" value="@mainPlan.PlanFromTo" />
                @Html.AntiForgeryToken()
                <!-- 查询条件-->

                <hr class="no-padding no-margin" />
                <div class="row">
                    <div class="col-xs-12">
                        <div class="space-4"></div>
                        <!-- 查询列表 -->
                        <div class="row">
                            @{
                                List<string> proLineNos = ViewBag.ProLineNos as List<string>;
                                int lineIndex = 0;
                            }
                            <div class="col-xs-12 table-responsive">
                                <table id="simple-table" class="table table-hover table-condensed table-bordered">
                                    <thead>
                                        <tr>
                                            <th>实际工时数</th>

                                            @if (mainPlan != null)
                                            {
                                                for (int i = 0; i < 21; i++)
                                                {
                                                    var date = mainPlan.PlanFromDate.AddDays(i);
                                                    <th>@date.ToString("MM-dd")</th>
                                                }
                                            }

                                        </tr>

                                    </thead>
                                    <tbody>
                                        @foreach (var line in proLineNos)
                                        {
                                            <tr>
                                                <td>@line</td>
                                                @if (mainPlan != null)
                                                {
                                                    for (int i = 0; i < 21; i++)
                                                    {
                                                        string id = "sum" + lineIndex + i;
                                                        <td><lable id="@id"></lable></td>
                                                    }
                                                    lineIndex++;
                                                }
                                            </tr>
                                        }
                                    </tbody>


                                </table>
                            </div>
                            <!-- /.span -->


                        </div><!-- /.row -->
                        <!-- PAGE CONTENT ENDS -->
                    </div><!-- /.col -->
                </div><!-- /.row -->

            </form>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <!-- PAGE CONTENT BEGINS -->
            <div>
                <!-- #section:pages/faq -->

                <ul class="nav nav-tabs padding-18 tab-size-bigger" id="myTab">
                    @{
                        string allLines = "";
                    }
                    @for (int ii = 0; ii < proLineNos.Count; ii++)
                    {
                        string line = proLineNos[ii];
                        allLines += string.Format("{0},", line);
                        if (ii == 0)
                        {
                            <li class="active">
                                <a data-toggle="tab" href="#" onclick="show(@ii);">
                                    @line
                                </a>
                            </li>
                        }
                        else
                        {
                            <li>
                                <a data-toggle="tab" href="#" onclick="show(@ii);">
                                    @line
                                </a>
                            </li>
                        }
                    }

                </ul>

                @Html.AntiForgeryToken()
                <input type="hidden" id="allLineCount" value="@proLineNos.Count" />
                <input type="hidden" id="allLines" value="@allLines" />
                <!-- /section:pages/faq -->
                <div class=" no-border padding-24">
                    @{
                        int startIndex = 0;
                        //列
                        List<string> allColumns = new List<string>();
                        if (mainPlan != null)
                        {
                            allColumns.Add("零件号");
                            allColumns.Add("零件名称");
                            allColumns.Add("发运地");
                            allColumns.Add("发运地说明");
                            allColumns.Add("类型");
                            allColumns.Add("产能");
                            allColumns.Add("库存");

                            string[] Day = new string[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
                            for (int i = 0; i < 21; i++)
                            {
                                var date = mainPlan.PlanFromDate.AddDays(i);
                                string week = Day[Convert.ToInt32(date.DayOfWeek.ToString("d"))].ToString();
                                allColumns.Add(week + "<br/>" + date.ToString("MM-dd"));
                            }
                        }
                        //数据
                        List<List<object>> lineData = new List<List<object>>();
                        DateTime start = DateTime.Now;
                    }
                    @foreach (var line in proLineNos)
                    {
                        var currentLineList = Model.ToList().FindAll(t => t.ProLineNo == line);
                        List<object> dataNumList = new List<object>();
                        string goodNos = "";
                        string temoGoodNos = "";
                        foreach (var m in currentLineList)
                        {
                            goodNos += string.Format("'{0}',", m.GoodNo);
                            temoGoodNos += string.Format("{0},", m.GoodNo);
                        }
                        goodNos = goodNos.Trim(',');

                        string startClass = "";
                        string startDivClass = "display:none;";
                        if (startIndex == 0)
                        {
                            startClass = "  in active";
                            startDivClass = "";
                        }

                        string hot = "hot" + startIndex;
                        var id = "line" + startIndex;

                        var ZBPeople = line + "ZB";
                        var MBPeople = line + "MB";
                        var WBPeople = line + "WB";
                        var goodsLine = line + "Goods";
                        var tempGoodsLine = "temp" + line + "Goods";

                        <div id="@id" class="@startClass" style="@startDivClass">
                            <div class="row">
                                <div class="col-xs-12">
                                    <!--早中晚人数信息-->
                                    <div class="form-group" style="margin-bottom:6px; margin-top:10px;">
                                        <input type="hidden" value="@goodNos" id="@goodsLine" />
                                        <input type="hidden" value="@temoGoodNos" id="@tempGoodsLine" />
                                        <label class="col-sm-1 control-label no-padding-right" for="form-field-tags">早班人数：</label>
                                        <div class="col-sm-2 ">
                                            <input type="text" name="@ZBPeople" id="@ZBPeople" placeholder="早班人数" onchange="sumGongShiAndChanNeng(@startIndex,'@line',@currentLineList.Count);" value="@ViewBag.RoleName" />

                                        </div>
                                        <label class="col-sm-1 control-label no-padding-right" for="form-field-tags">中班人数：</label>
                                        <div class="col-sm-2 ">
                                            <input type="text" name="@MBPeople" id="@MBPeople" placeholder="中班人数" onchange="sumGongShiAndChanNeng(@startIndex,'@line',@currentLineList.Count);" value="@ViewBag.RoleName" />

                                        </div>
                                        <label class="col-sm-1 control-label no-padding-right" for="form-field-tags">晚班人数：</label>
                                        <div class="col-sm-3 ">
                                            <input type="text" name="@WBPeople" id="@WBPeople" placeholder="晚班人数" onchange="sumGongShiAndChanNeng(@startIndex,'@line',@currentLineList.Count);" value="@ViewBag.RoleName" />

                                        </div>

                                        @*<div class="col-sm-2 ">
                                                <a class="btn btn-sm btn-success" href="/PS/edit?SchedulingLineId=1&SDate=2017-11-26" target="_blank">
                                                    <i class="ace-icon fa fa-undo bigger-110 "></i>
                                                    PS 确认
                                                </a>
                                            </div>*@
                                    </div>
                                    <hr class="no-padding" />

                                    <!-- 产品 时间 数量明细 -->

                                    <div id="@hot"></div>
                                </div>
                            </div>
                        </div>
                        startIndex++;
                        foreach (var m in currentLineList)
                        {
                            //需求

                            var xu_obj = new HotData();
                            xu_obj.Type = "需求";
                            xu_obj.StockNum = m.Qty;
                            //早
                            var zao_obj = new HotData();
                            zao_obj.Type = "早班";
                            zao_obj.StockNum = m.Qty;
                            //中
                            var zhong_obj = new HotData();
                            zhong_obj.GoodNo = m.GoodNo;
                            zhong_obj.GoodName = m.GoodName;
                            zhong_obj.ShipTo = m.ShipTo;
                            zhong_obj.ShipToName = m.ShipToName;
                            zhong_obj.Type = "中班";
                            zhong_obj.ChanNeng = null;
                            zhong_obj.StockNum = m.Qty;
                            //晚
                            var wan_obj = new HotData();
                            wan_obj.Type = "晚班";
                            wan_obj.StockNum = m.Qty;

                            //需求差异
                            var xuqiu_obj = new HotData();
                            xuqiu_obj.Type = "需求差异";
                            xuqiu_obj.ChanNeng = null;
                            xuqiu_obj.StockNum = m.Qty;

                            //供需求差异
                            var gongxuqiu_obj = new HotData();
                            gongxuqiu_obj.GoodNo = "整箱包装数";
                            gongxuqiu_obj.GoodName = "10";
                            gongxuqiu_obj.Type = "供需求差异";

                            List<SchedulingDateNumModel> dateNumList = new List<SchedulingDateNumModel>();
                            var currentLineShipPlansList = shipPlansList.FindAll(t => t.PlanId == m.Id);
                            if (mainPlan != null)
                            {
                                for (int i = 0; i < 21; i++)
                                {
                                    SchedulingDateNumModel dateNumModel = new SchedulingDateNumModel();
                                    if (i == 0)
                                    {
                                        dateNumModel.TopGongRequestDiffNum = m.Qty;
                                    }
                                    else
                                    {
                                        dateNumModel.TopGongRequestDiffNum = dateNumList[i - 1].RequestDiffNum;
                                    }

                                    var date = mainPlan.PlanFromDate.AddDays(i);
                                    var item = currentLineShipPlansList.Find(t => t.PlanDate == date);
                                    dateNumModel.date = date;

                                    if (item != null)
                                    {
                                        HotHelp.SetValue(xu_obj, item.PlanNum, i);
                                        dateNumModel.RequestNum = item.PlanNum;
                                    }

                                    dateNumList.Add(dateNumModel);
                                }
                            }


                            if (mainPlan != null)
                            {
                                for (int i = 0; i < 21; i++)
                                {

                                    var RequestDiffNum = dateNumList[i].RequestDiffNum;
                                    if (RequestDiffNum != null)
                                    {
                                        HotHelp.SetValue(xuqiu_obj, RequestDiffNum.Value, i);
                                    }


                                    var GongRequestDiffNum = dateNumList[i].GongRequestDiffNum;
                                    if (GongRequestDiffNum != null)
                                    {
                                        HotHelp.SetValue(gongxuqiu_obj, GongRequestDiffNum.Value, i);
                                    }
                                }
                            }



                            dataNumList.Add(xu_obj);
                            dataNumList.Add(zao_obj);
                            dataNumList.Add(zhong_obj);
                            dataNumList.Add(wan_obj);
                            dataNumList.Add(xuqiu_obj);
                            dataNumList.Add(gongxuqiu_obj);
                        }
                        lineData.Add(dataNumList);
                    }
                    @{
                        TimeSpan ts = DateTime.Now - start;
                        var allJson = new MvcHtmlString(Newtonsoft.Json.JsonConvert.SerializeObject(lineData));
                        var hearsJson = new MvcHtmlString(Newtonsoft.Json.JsonConvert.SerializeObject(allColumns));
                    }
                </div>
            </div>

            <!-- PAGE CONTENT ENDS -->
        </div><!-- /.col -->
    </div><!-- /.row -->


</div>

<script src="~/Content/components/datatables/media/js/jquery.dataTables.js"></script>
<script src="~/Content/components/_mod/datatables/jquery.dataTables.bootstrap.js"></script>
<script src="~/Content/components/datatables.net-buttons/js/dataTables.buttons.js"></script>
<script src="~/Content/components/datatables.net-buttons/js/buttons.flash.js"></script>
<script src="~/Content/components/datatables.net-buttons/js/buttons.html5.js"></script>
<script src="~/Content/components/datatables.net-buttons/js/buttons.print.js"></script>
<script src="~/Content/components/datatables.net-buttons/js/buttons.colVis.js"></script>
<script src="~/Content/components/datatables.net-select/js/dataTables.select.js"></script>
<link href="~/Content/StyleSheet1.css" rel="stylesheet" />
<script>

    var allJson =@allJson ;

    function parseToInt(obj) {
        var val = 0;
        if (isNaN(obj) || obj==null||obj == "") {
            val = 0;
        } else {
            val = parseInt(obj);
        }
        return val;
    }


    var htbingList = [];
    //for (var i = 0; i < 3600; i = i + 6) {

    //    //htbingList.push({ row: i, col: 0, rowspan: 5, colspan: 1 });
    //    htbingList.push({ row: i, col: 1, rowspan: 5, colspan: 1 });
    //    //htbingList.push({ row: i, col: 2, rowspan: 5, colspan: 1 });
    //    //htbingList.push({ row: i, col: 3, rowspan: 5, colspan: 1 });
    //    //htbingList.push({ row: i, col: 5, rowspan: 5, colspan: 1 });

    //}
    var MyColHeaders = @hearsJson;


    var colHeadersName = ['GoodNo', 'GoodName', 'ShipTo', 'ShipToName', 'Type', 'StockNum', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21'];


    var MyRenderer = function (instance, td, row, col, prop, value, cellProperties) {
        Handsontable.renderers.TextRenderer.apply(this, arguments);

        // $(td).css("text-align", "center");
        // $(td).css("vertical-align", "center");
        if (row % 6 == 0) {
            $(td).css("background-color", "lemonchiffon");
            if (col < 4) {
                //console.log(cellProperties);

                td.style.border = "0";
            }
            cellProperties.readOnly = true;
        }
            //需求差异
        else if ((row - 4) % 6 == 0) {
            $(td).css("background-color", "aliceblue");
            cellProperties.readOnly = true;
        }
            //供需求差异
        else if ((row - 5) % 6 == 0) {
            $(td).css("background-color", "aliceblue");
            cellProperties.readOnly = true;

        } else {
            if (col<4) {
                td.style.border = "0";
            }
        }

        if ($(td).html() < 0) {
            $(td).css("color", "red");
        }

        //$(td).attr("class", "htDimmed")
    };

    var allHotList=[];

    for(var i=0;i<$("#allLineCount").val();i++){
        showHot(i);
    }

    function showHot(i){
        var dataObject = allJson[i];// [];
        var hotElement = document.querySelector('#hot'+i);
        var hotElementContainer = hotElement.parentNode;
        var hotSettings = {
            data: dataObject,
            columns: [
                {
                    data: 'GoodNo',
                    type: 'text',
                    readOnly: true
                },
                  {
                      data: 'GoodName',
                      type: 'text',
                      readOnly: true
                  },
                   {
                       data: 'ShipTo',
                       type: 'text',
                       readOnly: true
                   },
                   {
                       data: 'ShipToName',
                       type: 'text',
                       readOnly: true
                   },
                   {
                       data: 'Type',
                       type: 'text',
                       readOnly: true
                   },
                   {
                       data: 'ChanNeng',
                       type: 'text',
                       readOnly: true
                   },
                   {
                       data: 'StockNum',
                       type: 'text',
                       readOnly: true
                   },
                   {
                       data: 'One',
                       type: 'numeric'
                   },
                   {
                       data: 'Two',
                       type: 'numeric'
                   },
                   {
                       data: 'Three',
                       type: 'numeric'
                   },
                   {
                       data: 'Four',
                       type: 'numeric'
                   },
                   {
                       data: 'Five',
                       type: 'numeric'
                   },
                   {
                       data: 'Six',
                       type: 'numeric'
                   },
                   {
                       data: 'Seven',
                       type: 'numeric'
                   },
                   {
                       data: 'Eight',
                       type: 'numeric'
                   },
                   {
                       data: 'Nine',
                       type: 'numeric'
                   },
                   {
                       data: 'Ten',
                       type: 'numeric'
                   },
                   {
                       data: 'Eleven',
                       type: 'numeric'
                   },
                   {
                       data: 'Twelve',
                       type: 'numeric'
                   },
                    {
                        data: 'Thirteen',
                        type: 'numeric'
                    },
                     {
                         data: 'Fourteen',
                         type: 'numeric'
                     },
                      {
                          data: 'Fifteen',
                          type: 'numeric'
                      },
                       {
                           data: 'Sixteen',
                           type: 'numeric'
                       },
                        {
                            data: 'Seventeen',
                            type: 'numeric'
                        },
                         {
                             data: 'Eighteen',
                             type: 'numeric'
                         },
                          {
                              data: 'Nineteen',
                              type: 'numeric'
                          },
                           {
                               data: 'Twenty',
                               type: 'numeric'
                           },
                            {
                                data: 'TwentyOne',
                                type: 'numeric'
                            }
            ],
            stretchH: 'all',
            //width: 1024,
            autoWrapRow: true,
            //height: 487,
            //maxRows: 22,
            search: true,
            trimRows: [
              1,
              2,
              5
            ],
            mergeCells: true,
            contextMenu: false,
            mergeCells: htbingList,
            //cell: [
            //       { row: 0, col: 0, className: "htCenter htMiddle" }, // 设置下标为0,0的单元格样式 水平居中、垂直居中,
            //       { row: 0, col: 1, className: "htCenter htMiddle", readOnly: true },
            //        { row: 6, col: 1, className: "htCenter htMiddle", readOnly: true },
            //        { row: 0, col: 2, className: "htCenter htMiddle" },
            //        { row: 0, col: 3, className: "htCenter htMiddle" },
            //        { row: 5, col: 6, rowspan: 1, colspan: 10, readOnly: true, className: "htCenter htMiddle" }

            //],
            cells: function (row, col, prop) {
                this.renderer = MyRenderer;
            },
            rowHeaders: true,
            colHeaders:MyColHeaders,
            //fixedRowsTop: 2,
            //fixedColumnsLeft: 3,
            //renderAllRows:true,//是否呈现所有行
            afterSetCellMeta: function (row, col, key, val,prop) {
                console.log("cell meta changed", row, col, key, val,prop);
            },
            afterChange: function (changes, source) {

                if (source == null || changes == null) {
                    return;
                }

                var params = [];
                if (changes != null) {
                    var row = parseInt(changes[0][0]);//行
                    var colPro = changes[0][1];//列属性
                    var hot=allHotList[currentLineIndex];
                    var colIndex =hot.propToCol(colPro);// colHeadersName.indexOf(colPro);
                    if(colIndex<=6){
                        return;
                    }
                    //当等于1 也就是第一列 时 初期库存= 供需求差异
                    //需求差异=需求-上一次供需求差异
                    //供需求差异=需求差异+早中晚数量
                    var XQNum_Index = 0;
                    if ((row - 1) % 6 == 0) {
                        //早
                        XQNum_Index = row - 1;
                    } else if ((row - 2) % 6 == 0) {
                        //中
                        XQNum_Index = row - 2;

                    } else if ((row - 3) % 6 == 0) {
                        //晚
                        XQNum_Index = row - 3;
                    }
                    if ((row - 1) % 6 == 0 || (row - 2) % 6 == 0 || (row - 3) % 6 == 0) {

                        //思路先获取 需求 早中晚的信息，然后计算需求差异，供求差异，最后整体赋值给hot
                        var XQ_RowData=hot.getDataAtRow(XQNum_Index);

                        var ZB_RowData=hot.getDataAtRow(XQNum_Index+1);
                        console.log(ZB_RowData);
                        var MB_RowData=hot.getDataAtRow(XQNum_Index+2);
                        var WB_RowData=hot.getDataAtRow(XQNum_Index+3);
                        var aa=XQNum_Index+4;
                        var bb=XQNum_Index+5;
                        var editData=[];
                        var requestDiffNum =0;
                        var gongRequestDiffNum =0;
                        var topGongRequestDiffNum=0;

                        for(var i=colIndex;i<27;i++){

                            //编辑的是否是第一行数据，第一行数据要拿库存作为 供需求查询默认值
                            //初始化数据
                            if(i==colIndex){
                                if(i==7){
                                    topGongRequestDiffNum=XQ_RowData[i-1];
                                }else{
                                    topGongRequestDiffNum=hot.getDataAtCell(bb,i-1);
                                }
                                console.log(topGongRequestDiffNum);
                            }
                            //计算当前的信息
                            requestDiffNum = topGongRequestDiffNum - parseToInt(XQ_RowData[i]);
                            gongRequestDiffNum = requestDiffNum + parseToInt(ZB_RowData[i]) + parseToInt(MB_RowData[i]) + parseToInt(WB_RowData[i]);
                            editData.push([aa, i, requestDiffNum]);
                            editData.push( [bb, i, gongRequestDiffNum]);
                            topGongRequestDiffNum=gongRequestDiffNum;
                        }
                        hot.setDataAtCell(editData);
                        var topColIndex=0;
                        for(var sumCol=0;sumCol<changes.length;sumCol++){
                            var editColIndex=hot.propToCol(changes[sumCol][1]);
                            if(topColIndex!=editColIndex){
                                SumGongShi(editColIndex);
                                topColIndex=editColIndex;
                            }
                        }

                    }
                }

            }

        };
        var hot = new Handsontable(hotElement, hotSettings);
        allHotList.push(hot);
    }

    function onlyExactMatch(queryStr, value) {
        return queryStr.toString() === value.toString();
    }

    //Handsontable.Dom.addEvent($("#APAB03ZB"), 'keyup', function (event) {
    //    var queryResult = hot.search.query(this.value);

    //    console.log(queryResult);
    //    hot.render();
    //});

    //计算工时信息
    function SumGongShi(col){
        var hot=allHotList[currentLineIndex];
        var colDataList=hot.getDataAtCol(col);
        var sum=0;
        for(var i=1;i<colDataList.length;i++){

            if ((i - 1) % 6 == 0||(i - 2) % 6 == 0||(i - 3) % 6 == 0) {
                //早
                var channeng=hot.getDataAtCell(i,5);
                if(channeng!=null&&colDataList[i]!=null){
                    //转换成秒
                    sum+=colDataList[i]/channeng*60*60;
                }
            }

        }
        //实际工时数=SUM（零件的早班生产量/早班人数的产能量+零件的中班生产量/中班人数的产能量+零件的晚班生产量/晚班人数的产能量）
        //注意：1）早中晚班的工时要换算成秒，才可以相加，最终的总工时才可以换算成小时。
        //2）SUM是将所有零件的所有工时，加总到一起。
        //3）建议，每更新一个生产计划，相关的需求差异和实际工时数会自动更新。
        if (sum == 0) {
            $("#sum"+currentLineIndex+(col-7)).html("");
        }else{
            $("#sum"+currentLineIndex+(col-7)).html((sum/3600).toFixed(2));
        }

    }

    // //根据产线，人数获取对应的产能信息，如果没有获取到 则为0
    function sumGongShiAndChanNeng(index,proLineNo,lineGoodsCount){

        var zbPeople = parseToIntByTable($("#" + proLineNo + "ZB"), 1);
        var mbPeople = parseToIntByTable($("#" + proLineNo + "MB"), 1);
        var wbPeople = parseToIntByTable($("#" + proLineNo + "WB"), 1);
        var people = zbPeople + "," + mbPeople + "," + wbPeople;

        var url = "/Scheduling/GetProductions/?proLineNo=" + proLineNo + "&ShipMainProNo=" + $("#ShipMainProNo").val() + "&people=" + people;

        //如果全部都是0 则统计为0
        if (zbPeople == 0 && mbPeople == 0 && wbPeople == 0) {
            for (var i = 0; i < 21; i++) {
                $("#sum" + proLineNo + i).html("");
            }
            return;
        }

        $.ajax({
            data: { '__RequestVerificationToken': $('input[name=__RequestVerificationToken]').val() },
            url: url,
            type: 'post',
            async: false,
            cache: false,
            success: function (data) {
                if (data.Mess == "success") {
                    //如果没有找到对应的人数产能的信息则情况
                    if (data.Data.length==0) {
                        for (var i = 0; i < 21; i++) {
                            $("#sum" + proLineNo + i).html("");
                        }
                        return;
                    }
                    //先清空所有功能
                    var hot=allHotList[index];

                    //获取产能列
                    var colDataList=hot.getDataAtCol(5);
                    var sum=0;
                    var editData=[];
                    for(var i=1;i<colDataList.length;i++){
                        if ((i - 1) % 6 == 0||(i - 2) % 6 == 0||(i - 3) % 6 == 0) {
                            //早
                            editData.push([i, 5, null]);
                        }
                    }
                    hot.setDataAtCell(editData);

                    var newData=[];
                    //获取商品编码列
                    var goodDataList=hot.getDataAtCol(0);
                    //查找对应的商品的产能信息
                    for(var i=1;i<colDataList.length;i++){
                        if ((i - 2) % 6 == 0) {
                            var goodNo=hot.getDataAtCell(i,0);
                            if(goodNo!=null&&goodNo!=""){
                                $.each(data.Data,function(index,item){
                                    if(item.People==zbPeople&&item.GoodNo==goodNo){
                                        newData.push([i-1, 5, item.Number]);
                                    }
                                    if(item.People==mbPeople&&item.GoodNo==goodNo){
                                        newData.push([i, 5, item.Number]);
                                    }
                                    if(item.People==wbPeople&&item.GoodNo==goodNo){
                                        newData.push([i+1, 5, item.Number]);
                                    }
                                });
                            }
                        }
                    }
                    hot.setDataAtCell(newData);

                    //按照天进行计算
                    for (var day = 7; day <= 28; day++) {
                        SumGongShi(day,proLineNo);
                    }
                }

            }
        });


    }

    var currentLineIndex=0;

    function show(index){
        currentLineIndex=index;
        $("#line"+index).css("display","block");
        for(var i=0;i<$("#allLineCount").val();i++){
            if(index!=i){
                $("#line"+i).css("display","none");
            }
        }
    }

    //转化成int 类型， 1是val 2是html
    function parseToIntByTable(obj, type) {
        var val = 0;
        if (type == 1) {
            if (obj.val() == "") {
                return 0;
            }
            val = parseInt(obj.val());
        } else {
            val = parseInt(obj.html());
        }

        if (isNaN(val)) {
            if (type == 1) {
                obj.val("");
            }
            val = 0;
        }
        return val;
    }
    $("#save").one("click",function(){        
        //$.ajax({
        //    beforeSend: function(){
        //        // Handle the beforeSend event
        //        $("#save").text("正在保存，定等候.....");
        //    },
        //    async: false, 
        //    // ......
        //});
       
        SaveData();
    });
    //保存信息
    function SaveData(){

       
        
        //1.先保存表头 [Pro_Scheduling] 纪录开始时间 ，结束时间，发运单信息 获取一个ID
        var scheduling_Id=0;
        var pro_Scheduling=
            {
                PlanFromDate:'@mainPlan.PlanFromDate',
                PlanToDate:'@mainPlan.PlanFromTo',
                Id:$("#Id").val()
            };
        var url="/Scheduling/AddPro_Scheduling";
        $.ajax({
            data: { '__RequestVerificationToken': $('input[name=__RequestVerificationToken]').val(),model:pro_Scheduling },
            url: url,
            type: 'post',
            async: true,
            cache: false,
            beforeSend: function(){
                // Handle the beforeSend event
                $("#save").text("正在保存，定等候.....");
                // 禁用按钮防止重复提交
                $("#save").attr({ disabled: "disabled" });
            },
            success: function (data) {
                if (data.Mess == "success") {
                    //如果没有找到对应的人数产能的信息则情况
                    scheduling_Id=data.Id;

                    if(scheduling_Id>0){
                        //2.在保存产线信息+ 早中晚人数信息
                        var allLines=$("#allLines").val().split(',');
                        for(var i=0;i<allLines.length;i++){
                            var line=allLines[i];
                            if(line!=""){
                                var zbPeople = parseToIntByTable($("#" + line + "ZB"), 1);
                                var mbPeople = parseToIntByTable($("#" + line + "MB"), 1);
                                var wbPeople = parseToIntByTable($("#" + line + "WB"), 1);
                                var Pro_SchedulingLine=
                                    {
                                        MainId:scheduling_Id,
                                        ProLineNo:line,
                                        MorningShift:zbPeople,
                                        MiddleShift:mbPeople,
                                        EveningShift:wbPeople,
                                    };
                                var SLineId=0;
                                url="/Scheduling/AddPro_SchedulingLine";
                                $.ajax({
                                    data: { '__RequestVerificationToken': $('input[name=__RequestVerificationToken]').val(),model:Pro_SchedulingLine },
                                    url: url,
                                    type: 'post',
                                    async: false,
                                    cache: false,
                                    success: function (data) {
                                        if (data.Mess == "success") {
                                            //如果没有找到对应的人数产能的信息则情况
                                            SLineId=data.Id;
                                          
                                            var hot=allHotList[i];
                                            var goodsList=[];
                                            //21 列
                                            for(var rowIndex=0;rowIndex<= hot.countRows();rowIndex=rowIndex+6){
                                              
                                                var xuDetail=hot.getDataAtRow(rowIndex);                       
                                                var zaoDetail=hot.getDataAtRow(rowIndex+1);                       
                                                var zhongDetail=hot.getDataAtRow(rowIndex+2);                      
                                                var wanDetail=hot.getDataAtRow(rowIndex+3);
                                                if(zhongDetail[0]==null){
                                                    continue;
                                                }
                                                //3.保存 产线+库存+产能信息
                                                var Pro_SchedulingGoods=
                                                    {
                                                        Date:'@mainPlan.PlanFromDate',
                                                        SLineId:SLineId,
                                                        GoodNo:zhongDetail[0],
                                                        GoodName:zhongDetail[1],
                                                        ShipTo:zhongDetail[2],
                                                        ShipToName:zhongDetail[3],
                                                        StockNum:zhongDetail[4],
                                                        PackNum:0,
                                                        MorningNum:zaoDetail[5],
                                                        MiddleNum:zhongDetail[5],
                                                        EveningNum:wanDetail[5],
                                                        Items:[]
                                                    };

                                                for(var colIndex=7;colIndex<=28;colIndex++){
                                                    var newIndex=colIndex-7;
                                                    var xu_val=xuDetail[colIndex];
                                                    //4.保存 产线对应日期的数量
                                                    if(xu_val!=null){
                                                        Pro_SchedulingGoods.Items.push(
                                                            {
                                                                SType:1,//1 需求，2 早班 ，3 中班， 4 晚班
                                                                Index:newIndex,
                                                                SNum:xu_val
                                                            });
                                                    }
                                                    var zao_val=zaoDetail[colIndex];
                                                    if(zao_val!=null){
                                                        Pro_SchedulingGoods.Items.push(
                                                            {
                                                                SType:2,//1 需求，2 早班 ，3 中班， 4 晚班
                                                                Index:newIndex,
                                                                SNum:zao_val
                                                            });
                                                    }
                                                    var zhong_val=zhongDetail[colIndex];
                                                    if(zhong_val!=null){
                                                        Pro_SchedulingGoods.Items.push(
                                                            {
                                                                SType:3,//1 需求，2 早班 ，3 中班， 4 晚班
                                                                Index:newIndex,
                                                                SNum:zhong_val
                                                            });
                                                    }
                                                    var wan_val=wanDetail[colIndex];
                                                    if(wan_val!=null){
                                                        Pro_SchedulingGoods.Items.push(
                                                            {
                                                                SType:4,//1 需求，2 早班 ，3 中班， 4 晚班
                                                                Index:newIndex,
                                                                SNum:wan_val
                                                            });
                                                    }
                                                }

                                                goodsList.push(Pro_SchedulingGoods);                   
                                            }
                                            url="/Scheduling/AddPro_SchedulingGoods";
                                            console.log(goodsList);
                                            $.ajax({
                                                data: { '__RequestVerificationToken': $('input[name=__RequestVerificationToken]').val(),model:goodsList },
                                                url: url,
                                                type: 'post',
                                                async: false,
                                                cache: false,
                                                success: function (data) {
                                                    if (data.Mess == "success") {
                                                      
                                                    }

                                                }
                                            });

                                        }

                                    }
                                });
                               
                              

                            }
                        }
                        alert("保存成功！");
                        window.close();
                    }
                }

            }
        });
       
    }
</script>
