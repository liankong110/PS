// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 12.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace VisualSmart.Dao.DataQuickStart
{
    using System.Text.RegularExpressions;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using System.Data;
    using System.Text;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class Template_DaoDataQuickStart : Template_DaoDataQuickStartBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"
 
using Spring.Data.Common;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VisualSmart.Dao.DataQuickStart.Base;
using VisualSmart.Domain;
using VisualSmart.Domain.SetUp;
using VisualSmart.Util;
using VisualSmart.Dao.DataQuickStart;
	namespace VisualSmart.Dao.DataQuickStart
		{
	 
	");
            
            #line 28 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"

	    string tableName="Alipay";
		this.IniData(tableName);
	 
	
            
            #line default
            #line hidden
            this.Write("\tpublic class ");
            
            #line 33 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Dao :  EntityDao<");
            
            #line 33 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Domain>\r\n\t{ \r\n\t\t");
            
            #line 35 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"

			string DoMain=tableName+"Domain";
		
            
            #line default
            #line hidden
            this.Write("\t\t/// <summary>\r\n        /// 新增\r\n        /// </summary>\r\n        /// <param name=" +
                    "\"entity\"></param>\r\n        /// <returns></returns>\r\n        public override bool" +
                    " Add(");
            
            #line 43 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write(" entity)\r\n        {\r\n            try\r\n            {\r\n                StringBuilde" +
                    "r strSql = new StringBuilder();\r\n                strSql.Append(\"insert into ");
            
            #line 48 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write("(\");\r\n\t\t\t\t\r\n                strSql.AppendFormat(\"{0})\",");
            
            #line 50 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AddSql));
            
            #line default
            #line hidden
            this.Write(");\r\n                strSql.Append(\" values (\");\r\n                strSql.AppendFor" +
                    "mat(\"{0})\",");
            
            #line 52 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AddSqlParameters));
            
            #line default
            #line hidden
            this.Write(@");
                strSql.Append("";select @@IDENTITY"");
                var parameters = GetBaseParams(entity);
                return WriteAdoTemplate.ExecuteNonQuery(CommandType.Text, strSql.ToString(), parameters) > 0;
            }
            catch (Exception)
            {

                throw;
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <param name=""entity""></param>
        /// <returns></returns>
        public override bool Update(");
            
            #line 69 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write("  entity)\r\n        {\r\n            StringBuilder strSql = new StringBuilder();\r\n  " +
                    "          strSql.Append(\"update ");
            
            #line 72 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write(" set \");\r\n            strSql.AppendFormat(\"{0}\",");
            
            #line 73 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UpdateSql));
            
            #line default
            #line hidden
            this.Write(@");           
            strSql.Append("" where Id=@Id"");
            var parameters = GetBaseParams(entity);
            parameters.Add(""ID"", DbType.Int32, 0).Value = entity.Id;
            return WriteAdoTemplate.ExecuteNonQuery(CommandType.Text, strSql.ToString(), parameters) > 0;
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name=""Id""></param>
        /// <returns></returns>
        public override bool Delete(int Id)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(""delete from ");
            
            #line 88 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write(@" "");
            strSql.Append("" where ID=@ID "");
            var parameters = WriteAdoTemplate.CreateDbParameters();
            parameters.Add(""ID"", DbType.Int32, 0).Value = Id;
            return WriteAdoTemplate.ExecuteNonQuery(CommandType.Text, strSql.ToString(), parameters) > 0;
        }

        /// <summary>
        /// 获取信息列表
        /// </summary>
        /// <param name=""query""></param>
        /// <returns></returns>
        public override IList<");
            
            #line 100 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write(" > GetAllDomain(QueryCondition query)\r\n        {\r\n            var parameters = Wr" +
                    "iteAdoTemplate.CreateDbParameters();\r\n            StringBuilder strSql = new Str" +
                    "ingBuilder();\r\n            strSql.AppendFormat(\"select {0}\",");
            
            #line 104 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SelectSql));
            
            #line default
            #line hidden
            this.Write(");\r\n            strSql.Append(\" FROM ");
            
            #line 105 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write(@" "");
            if (query.GetPager() != null)
            {
                strSql =new StringBuilder(GetPagerSql(strSql.ToString(), query, parameters));
            }
            else
            {
               strSql.Append(query.GetSQL_Where(parameters));
               strSql.Append(query.GetSQL_Order());
            }

            return ReadAdoTemplate.QueryWithRowMapperDelegate<");
            
            #line 116 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write(@" >(CommandType.Text, strSql.ToString(), MapRow, parameters);
        }
         
        /// <summary>
        /// 列表基本参数
        /// </summary>
        /// <param name=""dataReader""></param>
        /// <param name=""rowNum""></param>
        /// <returns></returns>
        public ");
            
            #line 125 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write("  MapRow(IDataReader dataReader, int rowNum)\r\n        {\r\n            ");
            
            #line 127 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write("  model = new ");
            
            #line 127 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write(@"();
            object ojb;
            ojb = dataReader[""Id""];
            if (ojb != null && ojb != DBNull.Value)
            {
                model.Id = (int)ojb;
            }
            ojb = dataReader[""MenuId""];
            if (ojb != null && ojb != DBNull.Value)
            {
                model.MenuId = (int)ojb;
            }
            model.FormName = dataReader[""FormName""].ToString();
            model.Path = dataReader[""Path""].ToString();
            ojb = dataReader[""FormIndex""];
            if (ojb != null && ojb != DBNull.Value)
            {
                model.FormIndex = (int)ojb;
            }
            model.FormImgURL = dataReader[""FormImgURL""].ToString();
            return model;
        }

     

        /// <summary>
        /// 新增 修改 基本参数
        /// </summary>
        /// <param name=""entity""></param>
        /// <returns></returns>
        private IDbParameters GetBaseParams(");
            
            #line 157 "D:\Project\支付平台\VisualSmart\VisualSmart.Dao.DataQuickStart\Template_DaoDataQuickStart.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DoMain));
            
            #line default
            #line hidden
            this.Write(@"  entity)
        {
            var parameters = WriteAdoTemplate.CreateDbParameters();

            parameters.Add(""@MenuId"", SqlDbType.Int, 4).Value = entity.MenuId;
            parameters.Add(""@FormName"", SqlDbType.NVarChar, 50).Value = entity.FormName;
            parameters.Add(""@Path"", SqlDbType.NVarChar, 50).Value = entity.Path;
            parameters.Add(""@FormIndex"", SqlDbType.Int, 4).Value = entity.FormIndex;
            parameters.Add(""@FormImgURL"", SqlDbType.NVarChar, 50).Value = entity.FormImgURL;
            return parameters;
        }
	 }
}

 
  ");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class Template_DaoDataQuickStartBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
